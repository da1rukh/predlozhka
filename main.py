import os
from aiogram import Bot, Dispatcher, F
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto,
    InputMediaVideo, InputMediaDocument
)
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv

load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OWNER_ID = int(os.getenv("OWNER_ID"))
CHANNEL_ID = int(os.getenv("CHANNEL_ID"))

bot = Bot(token=TELEGRAM_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start(message: Message):
    await message.answer("üì¨ –ü—Ä–∏—à–ª–∏ —Å—é–¥–∞ —Å–≤–æ—é –∏–¥–µ—é, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç ‚Äî —è –ø–µ—Ä–µ–¥–∞–º –∞–¥–º–∏–Ω—É!")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–∫–∏
@dp.message(F.chat.type == "private")
async def handle_submission(message: Message):
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f"approve:{message.chat.id}:{message.message_id}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data="reject")
            ]
        ]
    )

    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    caption = f"üì¨ <b>–ü—Ä–µ–¥–ª–æ–∂–∫–∞ –æ—Ç</b> @{message.from_user.username or message.from_user.full_name}:"

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    if message.text:
        await bot.send_message(OWNER_ID, f"{caption}\n\n{message.text}", reply_markup=kb)
    elif message.photo:
        await bot.send_photo(OWNER_ID, message.photo[-1].file_id, caption=caption + f"\n\n{message.caption or ''}", reply_markup=kb)
    elif message.video:
        await bot.send_video(OWNER_ID, message.video.file_id, caption=caption + f"\n\n{message.caption or ''}", reply_markup=kb)
    elif message.document:
        await bot.send_document(OWNER_ID, message.document.file_id, caption=caption + f"\n\n{message.caption or ''}", reply_markup=kb)
    elif message.audio:
        await bot.send_audio(OWNER_ID, message.audio.file_id, caption=caption + f"\n\n{message.caption or ''}", reply_markup=kb)
    elif message.voice:
        await bot.send_voice(OWNER_ID, message.voice.file_id, caption=caption, reply_markup=kb)
    else:
        await message.answer("‚ùó –≠—Ç–æ—Ç —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
        return

    await message.answer("üì® –¢–≤–æ—è –∏–¥–µ—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω—É. –ñ–¥–∏ –æ—Ç–≤–µ—Ç–∞!")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ç–∫–ª–æ–Ω–∏—Ç—å"
@dp.callback_query(F.data == "reject")
async def reject(callback: CallbackQuery):
    await callback.message.edit_text("‚ùå –ü—Ä–µ–¥–ª–æ–∂–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å"
@dp.callback_query(F.data.startswith("approve"))
async def approve(callback: CallbackQuery):
    data = callback.data.split(":")
    user_id = int(data[1])
    original_msg_id = int(data[2])

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    original = await bot.forward_message(OWNER_ID, user_id, original_msg_id)

    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –≤ –∫–∞–Ω–∞–ª
    try:
        await bot.copy_message(chat_id=CHANNEL_ID, from_chat_id=OWNER_ID, message_id=original.message_id)
        await bot.send_message(user_id, "üéâ –í–∞—à–∞ –ø—Ä–µ–¥–ª–æ–∂–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!")
        await callback.message.edit_text("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª.")
    except Exception as e:
        await callback.message.edit_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    import asyncio
    import logging
    logging.basicConfig(level=logging.INFO)
    asyncio.run(dp.start_polling(bot))
